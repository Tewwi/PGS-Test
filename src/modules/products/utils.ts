import { Images } from '../../models/product';

export const checkBoxValue = ['Name', 'SKU', 'Full Description'];
export const optionItemPerPage = [10, 25, 50, 75, 100];

interface TabelHeader {
  name: string;
  canSort: boolean;
}

export interface Memberships {
  label: string;
  value: number | string | null;
}

interface OG_tag {
  type: string;
  label: string;
}

export const tableHeaderLabel: TabelHeader[] = [
  {
    name: 'SKU',
    canSort: true,
  },
  {
    name: 'Name',
    canSort: true,
  },
  {
    name: 'Category',
    canSort: false,
  },
  {
    name: 'Price',
    canSort: false,
  },
  {
    name: 'In stock',
    canSort: false,
  },
  {
    name: 'Vendor',
    canSort: false,
  },
  {
    name: 'Arrival Date',
    canSort: false,
  },
];
export const sale_unit = ['$', '%'];

export const memberships: Memberships[] = [
  {
    label: 'General ',
    value: 4,
  },
];

export const ogTags: OG_tag[] = [
  {
    type: '0',
    label: 'Autogenerated',
  },
  {
    type: '1',
    label: 'Custom',
  },
];

export const metaDesc: OG_tag[] = [
  {
    type: 'A',
    label: 'Autogenerated',
  },
  {
    type: 'C',
    label: 'Custom',
  },
];

const ITEM_HEIGHT = 48;
const ITEM_PADDING_BOTTOM = -30;
export const MenuProps = {
  PaperProps: {
    style: {
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_BOTTOM,
      width: 250,
    },
  },
};

export const stockStatus = [
  {
    label: 'Any status',
    value: 'all',
  },
  {
    label: 'In Stock',
    value: 'in',
  },
  {
    label: 'Low stock',
    value: 'low',
  },
  {
    label: 'SOLD',
    value: 'out',
  },
];

export const availabilityStatus = [
  {
    label: 'Any availability status',
    value: 'all',
  },
  {
    label: 'Only enabled',
    value: '1',
  },
  {
    label: 'Only disabled',
    value: '0',
  },
];

export const concatImgOrder = (imagesApi?: Images[], deleIndex?: number[], imageUpload?: File[]) => {
  if (imagesApi && deleIndex) {
    const newImgApi = imagesApi.filter((item) => {
      return !deleIndex.includes(+item.id);
    });

    let newData = newImgApi.map((item) => item.file);
    if (imageUpload && imageUpload.length > 0) {
      newData = newData.concat(imageUpload.map((item: any) => item[0].name));
    }
    return newData;
  } else {
    return [];
  }
};
